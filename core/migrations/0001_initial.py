# Generated by Django 5.2 on 2025-08-21 16:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('evaluator', 'Evaluator'), ('researcher', 'Researcher'), ('admin', 'Admin')], default='evaluator', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reviewer_id', models.CharField(db_index=True, max_length=100)),
                ('reviewer_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'reviews',
                'indexes': [models.Index(fields=['reviewer_id'], name='reviews_reviewe_965d53_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReviewSentence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sentence_id', models.CharField(db_index=True, max_length=100)),
                ('review_sentence', models.TextField()),
                ('gpt4_prediction', models.TextField(blank=True, null=True)),
                ('gemini_prediction', models.TextField(blank=True, null=True)),
                ('perplexity_prediction', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sentences', to='core.review')),
            ],
            options={
                'db_table': 'review_sentences',
            },
        ),
        migrations.CreateModel(
            name='ModelPrediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_name', models.CharField(choices=[('gpt4', 'GPT-4'), ('gemini', 'Gemini Flash 2.5'), ('perplexity', 'Perplexity')], max_length=20)),
                ('prediction_text', models.TextField()),
                ('confidence_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sentence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='core.reviewsentence')),
            ],
            options={
                'db_table': 'model_predictions',
            },
        ),
        migrations.CreateModel(
            name='HumanEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('best_model', models.CharField(choices=[('gpt4', 'GPT-4'), ('gemini', 'Gemini Flash 2.5'), ('perplexity', 'Perplexity'), ('none', 'None (Alternative Provided)')], max_length=20)),
                ('alternative_solution', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('evaluation_time_seconds', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to=settings.AUTH_USER_MODEL)),
                ('sentence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='core.reviewsentence')),
            ],
            options={
                'db_table': 'human_evaluations',
            },
        ),
        migrations.CreateModel(
            name='DataUploadLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=255)),
                ('file_size_bytes', models.BigIntegerField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('total_rows', models.IntegerField(default=0)),
                ('successful_rows', models.IntegerField(default=0)),
                ('failed_rows', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('processing_log', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'data_upload_logs',
                'indexes': [models.Index(fields=['uploaded_by'], name='data_upload_uploade_962295_idx'), models.Index(fields=['status'], name='data_upload_status_181b70_idx'), models.Index(fields=['created_at'], name='data_upload_created_dfa000_idx')],
            },
        ),
        migrations.CreateModel(
            name='EvaluationSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_sentences', models.IntegerField(default=0)),
                ('completed_sentences', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'evaluation_sessions',
                'indexes': [models.Index(fields=['evaluator', 'is_active'], name='evaluation__evaluat_87cb87_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='reviewsentence',
            index=models.Index(fields=['sentence_id'], name='review_sent_sentenc_44c241_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewsentence',
            index=models.Index(fields=['review'], name='review_sent_review__3fa9eb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewsentence',
            unique_together={('review', 'sentence_id')},
        ),
        migrations.AddIndex(
            model_name='modelprediction',
            index=models.Index(fields=['sentence', 'model_name'], name='model_predi_sentenc_19187e_idx'),
        ),
        migrations.AddIndex(
            model_name='modelprediction',
            index=models.Index(fields=['model_name'], name='model_predi_model_n_157856_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='modelprediction',
            unique_together={('sentence', 'model_name')},
        ),
        migrations.AddIndex(
            model_name='humanevaluation',
            index=models.Index(fields=['sentence', 'evaluator'], name='human_evalu_sentenc_9f196f_idx'),
        ),
        migrations.AddIndex(
            model_name='humanevaluation',
            index=models.Index(fields=['evaluator'], name='human_evalu_evaluat_0695ee_idx'),
        ),
        migrations.AddIndex(
            model_name='humanevaluation',
            index=models.Index(fields=['best_model'], name='human_evalu_best_mo_ba2375_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='humanevaluation',
            unique_together={('sentence', 'evaluator')},
        ),
    ]
